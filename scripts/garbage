usage: Read, save, calculate a GGXF file [-h] [-o filename] [-n option=value]
                                         [-y option=value] [-c csv_filename]
                                         [-e epoch] [--base-epoch epoch]
                                         [--output-csv-file output_ssv_filename]
                                         [--csv-decimal-places csv_summary_file]
                                         [--csv-summary csv_summary_file]
                                         [--list-grids]
                                         [--dump-grid grid_id csv_file] [-g]
                                         [-v]
                                         ggxf_file

positional arguments:
  ggxf_file             Name of GGXF file to load - .yaml for YAML format

optional arguments:
  -h, --help            show this help message and exit
  -o filename, --output-ggxf-file filename
                        Save GGXF to file - .yaml for YAML format
  -n option=value, --netcdf4-option option=value
                        Options for NetCDF4 files (see below for options)
  -y option=value, --yaml-option option=value
                        Pptions for YAML files (see below for options)
  -c csv_filename, --coord-csv-file csv_filename
                        CSV file of points to calculate - assumes column headers with X, Y columns
  -e epoch, --epoch epoch
                        Epoch at which to calculate GGXF
  --base-epoch epoch    Base epoch for calculating change between epochs
  --output-csv-file output_ssv_filename
                        CSV file to convert - assumes column headers with X, Y columns (default based on input)
  --csv-decimal-places csv_summary_file
                        Number of decimal places for CSV calculated values
  --csv-summary csv_summary_file
                        Write a grid summary to the named CSV file
  --list-grids          Print a list of grids with ids
  --dump-grid grid_id csv_file
                        Dump a specific grid to a CSV file (use --list-grids to get grid ids)
  -g, --debug           Generate debugging output
  -v, --verbose         More verbose output

This is a proof of concept implementation to evaluate encoding options.
The output is not necessarily an "authoritative" GGXF file

The following options apply to NetCDF input (I) and output (O):

  "use_nested_grids" (O) Generate NetCDF with nested grid definition (true or false, default true)
  "write_cdl" (O) Generate an output CDL file as well as a NetCDF file (default false)
  "use_compound_types" (O) Use compound types (very limited test implementation) (default false)

The following options can apply to YAML format input (I) and output (O):

  "grid_directory" (I) Base directory used for external grid source names
  "check_datasource_affine_coeffs" (I) Compare affine coeffs from data source with those defined in YAML (true or false)
  "use_nested_grids" (O) Create nested grids in the output YAML (true or false, default true)
  "use_griddata_section" (O) Use a gridData section for grid data (true or false, default true if more than one grid)
  "write_headers_only (O) Write headers only - omit the grid data"
